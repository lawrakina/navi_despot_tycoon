// DO NOT EDIT, AUTOMATICALLY GENERATED BY generate.js

@available(iOS 10.0, *)
public class UserEvent: UserEventBase {
    /// A new session has been started by the user. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    internal static let SESSION_TRACKING_START = EventDetails(name: "session_tracking_start", category: "session", element: "tracking", action: "start")

    /// The session of the user ended. The duration denotes the time the user stayed in the app. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    ///
    /// Value: duration
    /// Unit: milliseconds
    internal static let SESSION_TRACKING_END = EventDetails(name: "session_tracking_end", category: "session", element: "tracking", action: "end")

    /// The app was launched by the user and did not run before. The duration denotes the time the app was running before the SDK was initialized. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    ///
    /// Value: duration
    /// Unit: milliseconds
    internal static let SESSION_APP_OPEN = EventDetails(name: "session_app_open", category: "session", element: "app", action: "open")

    /// The app was installed by the user and launched for the first time. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    ///
    /// Value: duration
    /// Unit: milliseconds
    internal static let SESSION_APP_INSTALL = EventDetails(name: "session_app_install", category: "session", element: "app", action: "install")

    /// The app was successfully loaded. The duration denotes the time it took the app to load all resources until the user could use it. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    ///
    /// Value: duration
    /// Unit: milliseconds
    internal static let SESSION_APP_LOAD = EventDetails(name: "session_app_load", category: "session", element: "app", action: "load")

    /// The app was updated since the last time it was launched. The duration denotes the time the app was running before the SDK was initialized. Event is automatically send by the JustTrack SDK.
    ///
    /// Dimensions:
    ///   session_id
    ///   previous_app_version_code
    ///
    /// Value: duration
    /// Unit: milliseconds
    internal static let SESSION_APP_UPDATE = EventDetails(name: "session_app_update", category: "session", element: "app", action: "update")

    /// A screen was shown to the user. Use element_name or element_id to specify which screen.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_SCREEN_SHOW = EventDetails(name: "user_screen_show", category: "user", element: "screen", action: "show")

    /// A notification was shown to the user. Use element_name or element_id to specify which notification.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_NOTIFICATION_SHOW = EventDetails(name: "user_notification_show", category: "user", element: "notification", action: "show")

    /// A dialog was shown to the user. Use element_name or element_id to specify which dialog.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_DIALOG_SHOW = EventDetails(name: "user_dialog_show", category: "user", element: "dialog", action: "show")

    /// A button was shown to the user. Use element_name or element_id to specify which button.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_BUTTON_SHOW = EventDetails(name: "user_button_show", category: "user", element: "button", action: "show")

    /// A card was shown to the user. Use element_name or element_id to specify which card.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_CARD_SHOW = EventDetails(name: "user_card_show", category: "user", element: "card", action: "show")

    /// A button was clicked by the user. Use element_name or element_id to specify which button.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_BUTTON_CLICK = EventDetails(name: "user_button_click", category: "user", element: "button", action: "click")

    /// A notification was clicked by the user. Use element_name or element_id to specify which notification.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_NOTIFICATION_CLICK = EventDetails(name: "user_notification_click", category: "user", element: "notification", action: "click")

    /// A card was clicked by the user. Use element_name or element_id to specify which card.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let USER_CARD_CLICK = EventDetails(name: "user_card_click", category: "user", element: "card", action: "click")

    /// You can provide an exact numeric rating as value to see average on the dashboard and/or group the ratings using element_name/element_id
    /// Note: If you want to see the count per Rating (ex. 1-5 stars) you need to provide the rating as element_name/element_id or custom dimension.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    ///
    /// Value: count
    /// Unit: count
    public static let USER_RATING_PROVIDE = EventDetails(name: "user_rating_provide", category: "user", element: "rating", action: "provide")

    /// You can provide an exact numeric rating as value to see average on the dashboard and/or group the ratings using element_name/element_id
    /// Note: If you want to see the count per Rating (ex. 1-5 stars) you need to provide the rating as element_name/element_id or custom dimension.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    ///
    /// Value: count
    /// Unit: count
    public static let USER_RATING_POSITIVE = EventDetails(name: "user_rating_positive", category: "user", element: "rating", action: "positive")

    /// You can provide an exact numeric rating as value to see average on the dashboard and/or group the ratings using element_name/element_id
    /// Note: If you want to see the count per Rating (ex. 1-5 stars) you need to provide the rating as element_name/element_id or custom dimension.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    ///
    /// Value: count
    /// Unit: count
    public static let USER_RATING_NEUTRAL = EventDetails(name: "user_rating_neutral", category: "user", element: "rating", action: "neutral")

    /// You can provide an exact numeric rating as value to see average on the dashboard and/or group the ratings using element_name/element_id
    /// Note: If you want to see the count per Rating (ex. 1-5 stars) you need to provide the rating as element_name/element_id or custom dimension.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    ///
    /// Value: count
    /// Unit: count
    public static let USER_RATING_NEGATIVE = EventDetails(name: "user_rating_negative", category: "user", element: "rating", action: "negative")

    /// The user started the registration process.
    public static let REGISTRATION_PROCESS_START = EventDetails(name: "registration_process_start", category: "registration", element: "process", action: "start")

    /// The user finished the registration process. You can provide the duration since the start of the process to see an average on the dashboard.
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let REGISTRATION_PROCESS_FINISH = EventDetails(name: "registration_process_finish", category: "registration", element: "process", action: "finish")

    /// The user failed the registration process. You can provide the duration since the start of the process to see an average on the dashboard.
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let REGISTRATION_PROCESS_FAIL = EventDetails(name: "registration_process_fail", category: "registration", element: "process", action: "fail")

    /// Track the terms of services being shown to the user.
    public static let REGISTRATION_TOS_SHOW = EventDetails(name: "registration_tos_show", category: "registration", element: "tos", action: "show")

    /// Track the terms of services being accepted to the user.
    public static let REGISTRATION_TOS_ACCEPT = EventDetails(name: "registration_tos_accept", category: "registration", element: "tos", action: "accept")

    /// Track the terms of services being declined to the user.
    public static let REGISTRATION_TOS_DECLINE = EventDetails(name: "registration_tos_decline", category: "registration", element: "tos", action: "decline")

    /// Track requesting users to provide their age.
    public static let REGISTRATION_AGE_REQUEST = EventDetails(name: "registration_age_request", category: "registration", element: "age", action: "request")

    /// Track users providing their age.
    ///
    /// Dimensions:
    ///   age
    public static let REGISTRATION_AGE_PROVIDE = EventDetails(name: "registration_age_provide", category: "registration", element: "age", action: "provide")

    /// Track users declining providing their age.
    public static let REGISTRATION_AGE_DECLINE = EventDetails(name: "registration_age_decline", category: "registration", element: "age", action: "decline")

    /// Track requesting users to provide their gender.
    public static let REGISTRATION_GENDER_REQUEST = EventDetails(name: "registration_gender_request", category: "registration", element: "gender", action: "request")

    /// Track users providing their gender.
    ///
    /// Dimensions:
    ///   gender
    public static let REGISTRATION_GENDER_PROVIDE = EventDetails(name: "registration_gender_provide", category: "registration", element: "gender", action: "provide")

    /// Track users declining providing their gender.
    public static let REGISTRATION_GENDER_DECLINE = EventDetails(name: "registration_gender_decline", category: "registration", element: "gender", action: "decline")

    /// Login method selected
    ///
    /// Dimensions:
    ///   provider_name
    public static let LOGIN_LOGINMETHOD_SELECT = EventDetails(name: "login_loginmethod_select", category: "login", element: "loginmethod", action: "select")

    /// Track 3rd party authorization progress
    ///
    /// Dimensions:
    ///   provider_name
    public static let LOGIN_PROVIDERAUTHORIZATION_START = EventDetails(name: "login_providerauthorization_start", category: "login", element: "providerauthorization", action: "start")

    /// Track 3rd party authorization progress
    ///
    /// Dimensions:
    ///   provider_name
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let LOGIN_PROVIDERAUTHORIZATION_FINISH = EventDetails(name: "login_providerauthorization_finish", category: "login", element: "providerauthorization", action: "finish")

    /// Track 3rd party authorization progress
    ///
    /// Dimensions:
    ///   provider_name
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let LOGIN_PROVIDERAUTHORIZATION_FAIL = EventDetails(name: "login_providerauthorization_fail", category: "login", element: "providerauthorization", action: "fail")

    /// Track login progress
    public static let LOGIN_PROCESS_START = EventDetails(name: "login_process_start", category: "login", element: "process", action: "start")

    /// Track login progress
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let LOGIN_PROCESS_FINISH = EventDetails(name: "login_process_finish", category: "login", element: "process", action: "finish")

    /// Track login progress
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let LOGIN_PROCESS_FAIL = EventDetails(name: "login_process_fail", category: "login", element: "process", action: "fail")

    /// Provide information when user has granted the usage permission or if it is missing
    public static let USAGE_PERMISSION_REQUIRED = EventDetails(name: "usage_permission_required", category: "usage", element: "permission", action: "required")

    /// Provide information when user has granted the usage permission or if it is missing
    public static let USAGE_PERMISSION_GRANT = EventDetails(name: "usage_permission_grant", category: "usage", element: "permission", action: "grant")

    /// Used for dialog before sending the user to the system settings
    public static let USAGE_REQUEST_SHOW = EventDetails(name: "usage_request_show", category: "usage", element: "request", action: "show")

    /// Used for dialog before sending the user to the system settings
    public static let USAGE_REQUEST_ACCEPT = EventDetails(name: "usage_request_accept", category: "usage", element: "request", action: "accept")

    /// Used for dialog before sending the user to the system settings
    public static let USAGE_REQUEST_DECLINE = EventDetails(name: "usage_request_decline", category: "usage", element: "request", action: "decline")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_START = EventDetails(name: "verification_process_start", category: "verification", element: "process", action: "start")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_CANCEL = EventDetails(name: "verification_process_cancel", category: "verification", element: "process", action: "cancel")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_FINISH = EventDetails(name: "verification_process_finish", category: "verification", element: "process", action: "finish")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_FAIL = EventDetails(name: "verification_process_fail", category: "verification", element: "process", action: "fail")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_NUMBERREQUESTED = EventDetails(name: "verification_process_numberrequested", category: "verification", element: "process", action: "numberrequested")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_NUMBERVALID = EventDetails(name: "verification_process_numbervalid", category: "verification", element: "process", action: "numbervalid")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_CODEREQUESTED = EventDetails(name: "verification_process_coderequested", category: "verification", element: "process", action: "coderequested")

    /// Track verification progress
    /// Verification is typically needed before payout
    ///
    /// Dimensions:
    ///   method
    public static let VERIFICATION_PROCESS_CODEVALID = EventDetails(name: "verification_process_codevalid", category: "verification", element: "process", action: "codevalid")

    /// An interstitial ad was successfully served. Events will be triggered automatically when using Ironsource mediation.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///   test_group
    ///   ad_segment_name
    ///   ad_instance_name
    ///
    /// Value: revenue
    /// Unit: count
    internal static let AD_INTERSTITIAL_SUCCESS = EventDetails(name: "ad_interstitial_success", category: "ad", element: "interstitial", action: "success")

    /// A rewarded video ad was successfully served. Events will be triggered automatically when using Ironsource mediation.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///   test_group
    ///   ad_segment_name
    ///   ad_instance_name
    ///
    /// Value: revenue
    /// Unit: count
    internal static let AD_REWARDED_SUCCESS = EventDetails(name: "ad_rewarded_success", category: "ad", element: "rewarded", action: "success")

    /// A banner ad was successfully served. Events will be triggered automatically when using Ironsource mediation.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///   test_group
    ///   ad_segment_name
    ///   ad_instance_name
    ///
    /// Value: revenue
    /// Unit: count
    internal static let AD_BANNER_SUCCESS = EventDetails(name: "ad_banner_success", category: "ad", element: "banner", action: "success")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_OFFERWALL_LOAD = EventDetails(name: "ad_offerwall_load", category: "ad", element: "offerwall", action: "load")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_OFFERWALL_OPEN = EventDetails(name: "ad_offerwall_open", category: "ad", element: "offerwall", action: "open")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_OFFERWALL_CLOSE = EventDetails(name: "ad_offerwall_close", category: "ad", element: "offerwall", action: "close")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_OFFERWALL_CLICK = EventDetails(name: "ad_offerwall_click", category: "ad", element: "offerwall", action: "click")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_OFFERWALL_SHOW = EventDetails(name: "ad_offerwall_show", category: "ad", element: "offerwall", action: "show")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_INTERSTITIAL_LOAD = EventDetails(name: "ad_interstitial_load", category: "ad", element: "interstitial", action: "load")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_INTERSTITIAL_OPEN = EventDetails(name: "ad_interstitial_open", category: "ad", element: "interstitial", action: "open")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_INTERSTITIAL_CLOSE = EventDetails(name: "ad_interstitial_close", category: "ad", element: "interstitial", action: "close")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_INTERSTITIAL_CLICK = EventDetails(name: "ad_interstitial_click", category: "ad", element: "interstitial", action: "click")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_INTERSTITIAL_SHOW = EventDetails(name: "ad_interstitial_show", category: "ad", element: "interstitial", action: "show")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_REWARDED_LOAD = EventDetails(name: "ad_rewarded_load", category: "ad", element: "rewarded", action: "load")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_REWARDED_OPEN = EventDetails(name: "ad_rewarded_open", category: "ad", element: "rewarded", action: "open")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_REWARDED_CLOSE = EventDetails(name: "ad_rewarded_close", category: "ad", element: "rewarded", action: "close")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_REWARDED_CLICK = EventDetails(name: "ad_rewarded_click", category: "ad", element: "rewarded", action: "click")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_REWARDED_SHOW = EventDetails(name: "ad_rewarded_show", category: "ad", element: "rewarded", action: "show")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_BANNER_LOAD = EventDetails(name: "ad_banner_load", category: "ad", element: "banner", action: "load")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_BANNER_OPEN = EventDetails(name: "ad_banner_open", category: "ad", element: "banner", action: "open")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_BANNER_CLOSE = EventDetails(name: "ad_banner_close", category: "ad", element: "banner", action: "close")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_BANNER_CLICK = EventDetails(name: "ad_banner_click", category: "ad", element: "banner", action: "click")

    /// Track ads
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: count
    /// Unit: count
    public static let AD_BANNER_SHOW = EventDetails(name: "ad_banner_show", category: "ad", element: "banner", action: "show")

    /// Track interstitial video starts.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_INTERSTITIAL_START = EventDetails(name: "ad_interstitial_start", category: "ad", element: "interstitial", action: "start")

    /// Track interstitial video stops.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_INTERSTITIAL_STOP = EventDetails(name: "ad_interstitial_stop", category: "ad", element: "interstitial", action: "stop")

    /// Track rewarded video starts.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_REWARDED_START = EventDetails(name: "ad_rewarded_start", category: "ad", element: "rewarded", action: "start")

    /// Track rewarded video stops.
    ///
    /// Dimensions:
    ///   ad_sdk_name
    ///   ad_network
    ///   ad_placement
    ///
    /// Value: duration
    /// Unit: seconds, milliseconds
    public static let AD_REWARDED_STOP = EventDetails(name: "ad_rewarded_stop", category: "ad", element: "rewarded", action: "stop")

    /// Used to track the player`s progress. Use element_name or element_id to specify the level.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_LEVEL_START = EventDetails(name: "progression_level_start", category: "progression", element: "level", action: "start")

    /// Used to track the player`s progress. Use element_name or element_id to specify the quest.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_QUEST_START = EventDetails(name: "progression_quest_start", category: "progression", element: "quest", action: "start")

    /// Used to track the player`s progress. Use element_name or element_id to specify the level.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_LEVEL_FINISH = EventDetails(name: "progression_level_finish", category: "progression", element: "level", action: "finish")

    /// Used to track the player`s progress. Use element_name or element_id to specify the level.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_LEVEL_FAIL = EventDetails(name: "progression_level_fail", category: "progression", element: "level", action: "fail")

    /// Used to track the player`s progress. Use element_name or element_id to specify the quest.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_QUEST_FINISH = EventDetails(name: "progression_quest_finish", category: "progression", element: "quest", action: "finish")

    /// Used to track the player`s progress. Use element_name or element_id to specify the quest.
    ///
    /// Dimensions:
    ///   element_name
    ///   element_id
    public static let PROGRESSION_QUEST_FAIL = EventDetails(name: "progression_quest_fail", category: "progression", element: "quest", action: "fail")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   item_type
    ///   item_name
    ///   item_id
    ///
    /// Value: count
    /// Unit: count
    public static let PROGRESSION_RESOURCE_SINK = EventDetails(name: "progression_resource_sink", category: "progression", element: "resource", action: "sink")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   item_type
    ///   item_name
    ///   item_id
    ///
    /// Value: count
    /// Unit: count
    public static let PROGRESSION_RESOURCE_SOURCE = EventDetails(name: "progression_resource_source", category: "progression", element: "resource", action: "source")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   item_type
    ///   item_name
    ///   item_id
    ///
    /// Value: count
    /// Unit: count
    public static let PURCHASE_OPTION_CLICK = EventDetails(name: "purchase_option_click", category: "purchase", element: "option", action: "click")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   item_type
    ///   item_name
    ///   item_id
    ///
    /// Value: count
    /// Unit: count
    public static let PURCHASE_OPTION_CONFIRM = EventDetails(name: "purchase_option_confirm", category: "purchase", element: "option", action: "confirm")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   category_name
    ///   provider_name
    ///
    /// Value: count
    /// Unit: count
    public static let PAYOUT_OPTION_CLICK = EventDetails(name: "payout_option_click", category: "payout", element: "option", action: "click")

    /// {count} can reflect the number of items or their value (ex. value in in-app currency)
    ///
    /// Dimensions:
    ///   category_name
    ///   provider_name
    ///
    /// Value: count
    /// Unit: count
    public static let PAYOUT_OPTION_CONFIRM = EventDetails(name: "payout_option_confirm", category: "payout", element: "option", action: "confirm")
}

@available(iOS 10.0, *)
internal class SessionTrackingStartEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_TRACKING_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class SessionTrackingEndEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, duration: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_TRACKING_END, dimensions: dimensions, value: duration, unit: Unit.milliseconds, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class SessionAppOpenEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, duration: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_APP_OPEN, dimensions: dimensions, value: duration, unit: Unit.milliseconds, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class SessionAppInstallEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, duration: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_APP_INSTALL, dimensions: dimensions, value: duration, unit: Unit.milliseconds, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class SessionAppLoadEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, duration: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_APP_LOAD, dimensions: dimensions, value: duration, unit: Unit.milliseconds, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class SessionAppUpdateEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(sessionId: String?, previousAppVersionCode: String?, duration: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let sessionId = sessionId {
            dimensions[Dimension.session_id] = sessionId
        }
        if let previousAppVersionCode = previousAppVersionCode {
            dimensions[Dimension.previous_app_version_code] = previousAppVersionCode
        }
        self.baseEvent = UserEventBase(name: UserEvent.SESSION_APP_UPDATE, dimensions: dimensions, value: duration, unit: Unit.milliseconds, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserScreenShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_SCREEN_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserScreenShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserScreenShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserScreenShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserNotificationShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_NOTIFICATION_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserNotificationShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserNotificationShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserNotificationShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserDialogShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_DIALOG_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserDialogShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserDialogShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserDialogShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserButtonShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_BUTTON_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserButtonShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserButtonShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserButtonShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserCardShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_CARD_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserCardShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserCardShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserCardShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserButtonClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_BUTTON_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserButtonClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserButtonClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserButtonClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserNotificationClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_NOTIFICATION_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserNotificationClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserNotificationClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserNotificationClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserCardClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_CARD_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserCardClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserCardClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserCardClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserRatingProvideEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_PROVIDE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(elementName: String?, elementId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_PROVIDE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserRatingProvideEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserRatingProvideEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserRatingProvideEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserRatingPositiveEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_POSITIVE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(elementName: String?, elementId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_POSITIVE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserRatingPositiveEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserRatingPositiveEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserRatingPositiveEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserRatingNeutralEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_NEUTRAL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(elementName: String?, elementId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_NEUTRAL, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserRatingNeutralEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserRatingNeutralEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserRatingNeutralEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UserRatingNegativeEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_NEGATIVE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(elementName: String?, elementId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.USER_RATING_NEGATIVE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UserRatingNegativeEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UserRatingNegativeEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UserRatingNegativeEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationProcessStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_PROCESS_START, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationProcessStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationProcessStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationProcessStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationProcessFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_PROCESS_FINISH, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(duration: Double, unit: TimeUnitGroup) {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_PROCESS_FINISH, dimensions: Dictionary(), value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationProcessFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationProcessFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationProcessFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationProcessFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_PROCESS_FAIL, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(duration: Double, unit: TimeUnitGroup) {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_PROCESS_FAIL, dimensions: Dictionary(), value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationProcessFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationProcessFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationProcessFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationTosShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_TOS_SHOW, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationTosShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationTosShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationTosShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationTosAcceptEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_TOS_ACCEPT, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationTosAcceptEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationTosAcceptEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationTosAcceptEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationTosDeclineEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_TOS_DECLINE, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationTosDeclineEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationTosDeclineEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationTosDeclineEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationAgeRequestEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_AGE_REQUEST, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationAgeRequestEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationAgeRequestEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationAgeRequestEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationAgeProvideEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(age: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let age = age {
            dimensions[Dimension.age] = age
        }
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_AGE_PROVIDE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationAgeProvideEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationAgeProvideEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationAgeProvideEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationAgeDeclineEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_AGE_DECLINE, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationAgeDeclineEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationAgeDeclineEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationAgeDeclineEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationGenderRequestEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_GENDER_REQUEST, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationGenderRequestEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationGenderRequestEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationGenderRequestEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationGenderProvideEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(gender: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let gender = gender {
            dimensions[Dimension.gender] = gender
        }
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_GENDER_PROVIDE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationGenderProvideEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationGenderProvideEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationGenderProvideEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class RegistrationGenderDeclineEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.REGISTRATION_GENDER_DECLINE, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return RegistrationGenderDeclineEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return RegistrationGenderDeclineEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return RegistrationGenderDeclineEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginLoginmethodSelectEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_LOGINMETHOD_SELECT, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginLoginmethodSelectEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginLoginmethodSelectEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginLoginmethodSelectEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProviderauthorizationStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROVIDERAUTHORIZATION_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProviderauthorizationStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProviderauthorizationStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProviderauthorizationStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProviderauthorizationFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROVIDERAUTHORIZATION_FINISH, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(providerName: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROVIDERAUTHORIZATION_FINISH, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProviderauthorizationFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROVIDERAUTHORIZATION_FAIL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(providerName: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROVIDERAUTHORIZATION_FAIL, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProviderauthorizationFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProcessStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROCESS_START, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProcessStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProcessStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProcessStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProcessFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROCESS_FINISH, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(duration: Double, unit: TimeUnitGroup) {
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROCESS_FINISH, dimensions: Dictionary(), value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProcessFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProcessFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProcessFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class LoginProcessFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROCESS_FAIL, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(duration: Double, unit: TimeUnitGroup) {
        self.baseEvent = UserEventBase(name: UserEvent.LOGIN_PROCESS_FAIL, dimensions: Dictionary(), value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return LoginProcessFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return LoginProcessFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return LoginProcessFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UsagePermissionRequiredEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.USAGE_PERMISSION_REQUIRED, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UsagePermissionRequiredEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UsagePermissionRequiredEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UsagePermissionRequiredEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UsagePermissionGrantEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.USAGE_PERMISSION_GRANT, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UsagePermissionGrantEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UsagePermissionGrantEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UsagePermissionGrantEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UsageRequestShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.USAGE_REQUEST_SHOW, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UsageRequestShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UsageRequestShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UsageRequestShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UsageRequestAcceptEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.USAGE_REQUEST_ACCEPT, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UsageRequestAcceptEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UsageRequestAcceptEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UsageRequestAcceptEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class UsageRequestDeclineEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init() {
        self.baseEvent = UserEventBase(name: UserEvent.USAGE_REQUEST_DECLINE, dimensions: Dictionary(), value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return UsageRequestDeclineEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return UsageRequestDeclineEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return UsageRequestDeclineEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessCancelEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_CANCEL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessCancelEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessCancelEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessCancelEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_FINISH, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_FAIL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessNumberrequestedEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_NUMBERREQUESTED, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessNumberrequestedEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessNumberrequestedEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessNumberrequestedEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessNumbervalidEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_NUMBERVALID, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessNumbervalidEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessNumbervalidEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessNumbervalidEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessCoderequestedEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_CODEREQUESTED, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessCoderequestedEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessCoderequestedEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessCoderequestedEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class VerificationProcessCodevalidEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(method: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let method = method {
            dimensions[Dimension.method] = method
        }
        self.baseEvent = UserEventBase(name: UserEvent.VERIFICATION_PROCESS_CODEVALID, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return VerificationProcessCodevalidEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return VerificationProcessCodevalidEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return VerificationProcessCodevalidEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class AdInterstitialSuccessEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(adSdkName: String?, adNetwork: String?, adPlacement: String?, testGroup: String?, adSegmentName: String?, adInstanceName: String?, revenue: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        if let testGroup = testGroup {
            dimensions[Dimension.test_group] = testGroup
        }
        if let adSegmentName = adSegmentName {
            dimensions[Dimension.ad_segment_name] = adSegmentName
        }
        if let adInstanceName = adInstanceName {
            dimensions[Dimension.ad_instance_name] = adInstanceName
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_SUCCESS, dimensions: dimensions, value: revenue, unit: Unit.count, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class AdRewardedSuccessEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(adSdkName: String?, adNetwork: String?, adPlacement: String?, testGroup: String?, adSegmentName: String?, adInstanceName: String?, revenue: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        if let testGroup = testGroup {
            dimensions[Dimension.test_group] = testGroup
        }
        if let adSegmentName = adSegmentName {
            dimensions[Dimension.ad_segment_name] = adSegmentName
        }
        if let adInstanceName = adInstanceName {
            dimensions[Dimension.ad_instance_name] = adInstanceName
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_SUCCESS, dimensions: dimensions, value: revenue, unit: Unit.count, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
internal class AdBannerSuccessEvent: PredefinedUserEvent {
    private let baseEvent: UserEventBuilder

    internal init(adSdkName: String?, adNetwork: String?, adPlacement: String?, testGroup: String?, adSegmentName: String?, adInstanceName: String?, revenue: Double, happenedAt: Date) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        if let testGroup = testGroup {
            dimensions[Dimension.test_group] = testGroup
        }
        if let adSegmentName = adSegmentName {
            dimensions[Dimension.ad_segment_name] = adSegmentName
        }
        if let adInstanceName = adInstanceName {
            dimensions[Dimension.ad_instance_name] = adInstanceName
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_SUCCESS, dimensions: dimensions, value: revenue, unit: Unit.count, happenedAt: happenedAt)
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdOfferwallLoadEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_LOAD, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_LOAD, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdOfferwallLoadEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdOfferwallLoadEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdOfferwallLoadEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdOfferwallOpenEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_OPEN, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_OPEN, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdOfferwallOpenEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdOfferwallOpenEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdOfferwallOpenEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdOfferwallCloseEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_CLOSE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_CLOSE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdOfferwallCloseEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdOfferwallCloseEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdOfferwallCloseEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdOfferwallClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdOfferwallClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdOfferwallClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdOfferwallClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdOfferwallShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_OFFERWALL_SHOW, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdOfferwallShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdOfferwallShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdOfferwallShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialLoadEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_LOAD, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_LOAD, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialLoadEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialLoadEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialLoadEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialOpenEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_OPEN, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_OPEN, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialOpenEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialOpenEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialOpenEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialCloseEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_CLOSE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_CLOSE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialCloseEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialCloseEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialCloseEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_SHOW, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedLoadEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_LOAD, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_LOAD, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedLoadEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedLoadEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedLoadEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedOpenEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_OPEN, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_OPEN, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedOpenEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedOpenEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedOpenEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedCloseEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_CLOSE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_CLOSE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedCloseEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedCloseEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedCloseEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_SHOW, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdBannerLoadEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_LOAD, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_LOAD, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdBannerLoadEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdBannerLoadEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdBannerLoadEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdBannerOpenEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_OPEN, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_OPEN, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdBannerOpenEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdBannerOpenEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdBannerOpenEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdBannerCloseEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_CLOSE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_CLOSE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdBannerCloseEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdBannerCloseEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdBannerCloseEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdBannerClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdBannerClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdBannerClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdBannerClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdBannerShowEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_SHOW, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_BANNER_SHOW, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdBannerShowEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdBannerShowEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdBannerShowEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_START, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdInterstitialStopEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_STOP, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_INTERSTITIAL_STOP, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdInterstitialStopEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdInterstitialStopEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdInterstitialStopEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_START, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class AdRewardedStopEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_STOP, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(adSdkName: String?, adNetwork: String?, adPlacement: String?, duration: Double, unit: TimeUnitGroup) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let adSdkName = adSdkName {
            dimensions[Dimension.ad_sdk_name] = adSdkName
        }
        if let adNetwork = adNetwork {
            dimensions[Dimension.ad_network] = adNetwork
        }
        if let adPlacement = adPlacement {
            dimensions[Dimension.ad_placement] = adPlacement
        }
        self.baseEvent = UserEventBase(name: UserEvent.AD_REWARDED_STOP, dimensions: dimensions, value: duration, unit: unit.unitValue, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return AdRewardedStopEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return AdRewardedStopEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return AdRewardedStopEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionLevelStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_LEVEL_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionLevelStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionLevelStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionLevelStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionQuestStartEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_QUEST_START, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionQuestStartEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionQuestStartEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionQuestStartEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionLevelFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_LEVEL_FINISH, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionLevelFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionLevelFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionLevelFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionLevelFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_LEVEL_FAIL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionLevelFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionLevelFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionLevelFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionQuestFinishEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_QUEST_FINISH, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionQuestFinishEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionQuestFinishEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionQuestFinishEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionQuestFailEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(elementName: String?, elementId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let elementName = elementName {
            dimensions[Dimension.element_name] = elementName
        }
        if let elementId = elementId {
            dimensions[Dimension.element_id] = elementId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_QUEST_FAIL, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionQuestFailEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionQuestFailEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionQuestFailEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionResourceSinkEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(itemType: String?, itemName: String?, itemId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_RESOURCE_SINK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(itemType: String?, itemName: String?, itemId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_RESOURCE_SINK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionResourceSinkEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionResourceSinkEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionResourceSinkEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class ProgressionResourceSourceEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(itemType: String?, itemName: String?, itemId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_RESOURCE_SOURCE, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(itemType: String?, itemName: String?, itemId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PROGRESSION_RESOURCE_SOURCE, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return ProgressionResourceSourceEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return ProgressionResourceSourceEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return ProgressionResourceSourceEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class PurchaseOptionClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(itemType: String?, itemName: String?, itemId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PURCHASE_OPTION_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(itemType: String?, itemName: String?, itemId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PURCHASE_OPTION_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return PurchaseOptionClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return PurchaseOptionClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return PurchaseOptionClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class PurchaseOptionConfirmEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(itemType: String?, itemName: String?, itemId: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PURCHASE_OPTION_CONFIRM, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(itemType: String?, itemName: String?, itemId: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let itemType = itemType {
            dimensions[Dimension.item_type] = itemType
        }
        if let itemName = itemName {
            dimensions[Dimension.item_name] = itemName
        }
        if let itemId = itemId {
            dimensions[Dimension.item_id] = itemId
        }
        self.baseEvent = UserEventBase(name: UserEvent.PURCHASE_OPTION_CONFIRM, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return PurchaseOptionConfirmEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return PurchaseOptionConfirmEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return PurchaseOptionConfirmEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class PayoutOptionClickEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(categoryName: String?, providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let categoryName = categoryName {
            dimensions[Dimension.category_name] = categoryName
        }
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.PAYOUT_OPTION_CLICK, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(categoryName: String?, providerName: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let categoryName = categoryName {
            dimensions[Dimension.category_name] = categoryName
        }
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.PAYOUT_OPTION_CLICK, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return PayoutOptionClickEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return PayoutOptionClickEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return PayoutOptionClickEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}

@available(iOS 10.0, *)
public class PayoutOptionConfirmEvent: HasCustomDimensions {
    private let baseEvent: UserEventBuilder

    public init(categoryName: String?, providerName: String?) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let categoryName = categoryName {
            dimensions[Dimension.category_name] = categoryName
        }
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.PAYOUT_OPTION_CONFIRM, dimensions: dimensions, value: 0.0, unit: nil, happenedAt: nil)
    }

    public init(categoryName: String?, providerName: String?, count: Double) {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let categoryName = categoryName {
            dimensions[Dimension.category_name] = categoryName
        }
        if let providerName = providerName {
            dimensions[Dimension.provider_name] = providerName
        }
        self.baseEvent = UserEventBase(name: UserEvent.PAYOUT_OPTION_CONFIRM, dimensions: dimensions, value: count, unit: Unit.count, happenedAt: nil)
    }

    private init(baseEvent: UserEventBuilder) {
        self.baseEvent = baseEvent
    }

    public func with(dimension1: String) -> HasCustomDimensions {
        return PayoutOptionConfirmEvent(baseEvent: baseEvent.with(dimension1: dimension1))
    }

    public func with(dimension2: String) -> HasCustomDimensions {
        return PayoutOptionConfirmEvent(baseEvent: baseEvent.with(dimension2: dimension2))
    }

    public func with(dimension3: String) -> HasCustomDimensions {
        return PayoutOptionConfirmEvent(baseEvent: baseEvent.with(dimension3: dimension3))
    }

    public func build() -> PublishableUserEvent {
        return baseEvent.build()
    }
}
