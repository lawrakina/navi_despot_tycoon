// DO NOT EDIT, AUTOMATICALLY GENERATED BY generate.js

/// An enum describing all possible dimensions of a UserEvent.
enum Dimension: Int {
    case custom_1
    case custom_2
    case custom_3
    case session_id
    case previous_app_version_code
    case element_name
    case element_id
    case age
    case gender
    case provider_name
    case method
    case ad_sdk_name
    case ad_network
    case ad_placement
    case test_group
    case ad_segment_name
    case ad_instance_name
    case item_type
    case item_name
    case item_id
    case category_name

    var stringValue: String {
        get {
            switch self {
            case .custom_1:
                return "custom_1"
            case .custom_2:
                return "custom_2"
            case .custom_3:
                return "custom_3"
            case .session_id:
                return "session_id"
            case .previous_app_version_code:
                return "previous_app_version_code"
            case .element_name:
                return "element_name"
            case .element_id:
                return "element_id"
            case .age:
                return "age"
            case .gender:
                return "gender"
            case .provider_name:
                return "provider_name"
            case .method:
                return "method"
            case .ad_sdk_name:
                return "ad_sdk_name"
            case .ad_network:
                return "ad_network"
            case .ad_placement:
                return "ad_placement"
            case .test_group:
                return "test_group"
            case .ad_segment_name:
                return "ad_segment_name"
            case .ad_instance_name:
                return "ad_instance_name"
            case .item_type:
                return "item_type"
            case .item_name:
                return "item_name"
            case .item_id:
                return "item_id"
            case .category_name:
                return "category_name"
            }
        }
    }

    static func from(string: String) -> Dimension? {
        switch string {
        case "custom_1":
            return .custom_1
        case "custom_2":
            return .custom_2
        case "custom_3":
            return .custom_3
        case "session_id":
            return .session_id
        case "previous_app_version_code":
            return .previous_app_version_code
        case "element_name":
            return .element_name
        case "element_id":
            return .element_id
        case "age":
            return .age
        case "gender":
            return .gender
        case "provider_name":
            return .provider_name
        case "method":
            return .method
        case "ad_sdk_name":
            return .ad_sdk_name
        case "ad_network":
            return .ad_network
        case "ad_placement":
            return .ad_placement
        case "test_group":
            return .test_group
        case "ad_segment_name":
            return .ad_segment_name
        case "ad_instance_name":
            return .ad_instance_name
        case "item_type":
            return .item_type
        case "item_name":
            return .item_name
        case "item_id":
            return .item_id
        case "category_name":
            return .category_name
        default:
            return nil
        }
    }
}

struct DTOUserEventDimensions: Encodable {
    let custom_1: String?
    let custom_2: String?
    let custom_3: String?
    let session_id: String?
    let previous_app_version_code: String?
    let element_name: String?
    let element_id: String?
    let age: String?
    let gender: String?
    let provider_name: String?
    let method: String?
    let ad_sdk_name: String?
    let ad_network: String?
    let ad_placement: String?
    let test_group: String?
    let ad_segment_name: String?
    let ad_instance_name: String?
    let item_type: String?
    let item_name: String?
    let item_id: String?
    let category_name: String?

    init(dimensions: Dictionary<Dimension, String>) {
        self.custom_1 = dimensions[Dimension.custom_1]
        self.custom_2 = dimensions[Dimension.custom_2]
        self.custom_3 = dimensions[Dimension.custom_3]
        self.session_id = dimensions[Dimension.session_id]
        self.previous_app_version_code = dimensions[Dimension.previous_app_version_code]
        self.element_name = dimensions[Dimension.element_name]
        self.element_id = dimensions[Dimension.element_id]
        self.age = dimensions[Dimension.age]
        self.gender = dimensions[Dimension.gender]
        self.provider_name = dimensions[Dimension.provider_name]
        self.method = dimensions[Dimension.method]
        self.ad_sdk_name = dimensions[Dimension.ad_sdk_name]
        self.ad_network = dimensions[Dimension.ad_network]
        self.ad_placement = dimensions[Dimension.ad_placement]
        self.test_group = dimensions[Dimension.test_group]
        self.ad_segment_name = dimensions[Dimension.ad_segment_name]
        self.ad_instance_name = dimensions[Dimension.ad_instance_name]
        self.item_type = dimensions[Dimension.item_type]
        self.item_name = dimensions[Dimension.item_name]
        self.item_id = dimensions[Dimension.item_id]
        self.category_name = dimensions[Dimension.category_name]
    }

    init(_ data: Data) throws {
        guard let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] else {
            throw DTODecodingError("failed to parse json as object")
        }

        self.custom_1 = json["custom_1"] as? String
        self.custom_2 = json["custom_2"] as? String
        self.custom_3 = json["custom_3"] as? String
        self.session_id = json["session_id"] as? String
        self.previous_app_version_code = json["previous_app_version_code"] as? String
        self.element_name = json["element_name"] as? String
        self.element_id = json["element_id"] as? String
        self.age = json["age"] as? String
        self.gender = json["gender"] as? String
        self.provider_name = json["provider_name"] as? String
        self.method = json["method"] as? String
        self.ad_sdk_name = json["ad_sdk_name"] as? String
        self.ad_network = json["ad_network"] as? String
        self.ad_placement = json["ad_placement"] as? String
        self.test_group = json["test_group"] as? String
        self.ad_segment_name = json["ad_segment_name"] as? String
        self.ad_instance_name = json["ad_instance_name"] as? String
        self.item_type = json["item_type"] as? String
        self.item_name = json["item_name"] as? String
        self.item_id = json["item_id"] as? String
        self.category_name = json["category_name"] as? String
    }

    func dimensions() -> Dictionary<Dimension, String> {
        var dimensions: Dictionary<Dimension, String> = Dictionary()
        if let custom_1 = custom_1 {
            dimensions[Dimension.custom_1] = custom_1
        }
        if let custom_2 = custom_2 {
            dimensions[Dimension.custom_2] = custom_2
        }
        if let custom_3 = custom_3 {
            dimensions[Dimension.custom_3] = custom_3
        }
        if let session_id = session_id {
            dimensions[Dimension.session_id] = session_id
        }
        if let previous_app_version_code = previous_app_version_code {
            dimensions[Dimension.previous_app_version_code] = previous_app_version_code
        }
        if let element_name = element_name {
            dimensions[Dimension.element_name] = element_name
        }
        if let element_id = element_id {
            dimensions[Dimension.element_id] = element_id
        }
        if let age = age {
            dimensions[Dimension.age] = age
        }
        if let gender = gender {
            dimensions[Dimension.gender] = gender
        }
        if let provider_name = provider_name {
            dimensions[Dimension.provider_name] = provider_name
        }
        if let method = method {
            dimensions[Dimension.method] = method
        }
        if let ad_sdk_name = ad_sdk_name {
            dimensions[Dimension.ad_sdk_name] = ad_sdk_name
        }
        if let ad_network = ad_network {
            dimensions[Dimension.ad_network] = ad_network
        }
        if let ad_placement = ad_placement {
            dimensions[Dimension.ad_placement] = ad_placement
        }
        if let test_group = test_group {
            dimensions[Dimension.test_group] = test_group
        }
        if let ad_segment_name = ad_segment_name {
            dimensions[Dimension.ad_segment_name] = ad_segment_name
        }
        if let ad_instance_name = ad_instance_name {
            dimensions[Dimension.ad_instance_name] = ad_instance_name
        }
        if let item_type = item_type {
            dimensions[Dimension.item_type] = item_type
        }
        if let item_name = item_name {
            dimensions[Dimension.item_name] = item_name
        }
        if let item_id = item_id {
            dimensions[Dimension.item_id] = item_id
        }
        if let category_name = category_name {
            dimensions[Dimension.category_name] = category_name
        }
        return dimensions
    }
}
